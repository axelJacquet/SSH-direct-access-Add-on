type: update
name: SSH direct access
baseUrl: https://raw.githubusercontent.com/axelJacquet/SSH-direct-access-Add-on/main/
description: 
  text:   
         Add your public ssh key to have direct access to your container.
  short: Easily add ssh key to your containers
  
logo: images/1000.svg

globals:
  env: ${env.name}
  node: ${targetNodes[0].id}

targetNodes:
    nodeGroup: '*'   
  
settings:
    main:
    fields:
   
            - name: key
              caption: Paste public key
              type: text 
              cls: x-form-field-wrap
              height: 200          
          
            
onInstall:

    - verify-public-ip
    - enable-public-ip
    - save-old-keys
    - add-key
    - add-to-redeploy
    - set-firewall
    
    - script: |
        var resp = jelastic.environment.control.GetNodeInfo("${env.name}", session, ${targetNodes[0].id});
        if (resp.result != 0) return resp;
        
        return {
         result: 0,
         extipsv6: resp.node.extipsv6
         }   
actions:
  verify-public-ip:
    - script: |
        var resp = jelastic.environment.control.GetNodeInfo("${env.name}", session, ${targetNodes[0].id});
        if (resp.result != 0) return resp;
        var hasExtIps = !!(resp.node.extipsv6 && resp.node.extipsv6[0])
        
        return {
         result: 0,
         hasExtIps: !!(resp.node.extipsv6 && resp.node.extipsv6[0]),
         extipsv6: resp.node.extipsv6,
         onAfterReturn: {
         call: [{
            action: 'enable-public-ip', 
            params: {
                hasExtIps: hasExtIps
            }, 
         }] 
          } 
        };
        
  enable-public-ip:
    - log: ${this.hasExtIps}
    
    - if ("${this.hasExtIps}" === "false"):
        - api: 
          - method: environment.binder.attachextip
            params:
              nodeid: ${targetNodes[0].id}
              nodeGroup: ${targetNodes.nodeGroup}
              type: ipv6
              
    - log: ${targetNodes.extipsv6}
 
  save-old-keys:
    - log: Make a copy of old authorized_keys file
    - cmd[${targetNodes.nodeGroup}]: |-
        cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys.backup
      sayYes: true

  add-key:
    - log: add public key
    - cmd[${targetNodes.nodeGroup}]: |-
        echo "${settings.key}" >> ~/.ssh/authorized_keys
      
  new-key:
    - log: add new public key
    - cmd[${targetNodes.nodeGroup}]: |-
        echo "${settings.key}" >> ~/.ssh/authorized_keys
        echo ~/.ssh/authorized_keys >> /etc/jelastic/redeploy.conf
        echo ~/.ssh/authorized_keys.backup >> /etc/jelastic/redeploy.conf
        cp ~/.ssh/authorized_keys ~/.ssh/authorized_keys.backup

  add-to-redeploy:
    - log: Add all necessary files and folder to the redeploy file
    - cmd[${targetNodes.nodeGroup}]: |-
        echo ~/.ssh/authorized_keys>> /etc/jelastic/redeploy.conf
        echo ~/.ssh/authorized_keys.backup >> /etc/jelastic/redeploy.conf

  reset-keys:
    - log: Resets added keys
    - cmd[${targetNodes.nodeGroup}]: |-
        cp ~/.ssh/authorized_keys.backup ~/.ssh/authorized_keys
      sayYes: true

  set-firewall:
    api[${targetNodes.nodeGroup}]:
      - method: environment.security.addrule
        params:
          rule: {
            action: "ALLOW",
            direction: "INPUT",
            name: "SSH",
            ports: "22"
            }
    
onUninstall:
  - reset-keys

buttons:
  - loadingText: Adding Key
    action: new-key
    settings: config
    caption: Add a new key
    skipEmail: true
  - caption: Reset keys
    action: reset-keys
    loadingText: Reseting
    confirmText: Do you really want to remove manually added keys?
    skipEmail: true
    
success:
  text:  success/success.md
  mail:  success/success.md
